{"version":3,"file":"static/js/712.32dff051.chunk.js","mappings":"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","sources":["components/LedGrid.js"],"sourcesContent":["import React, { useEffect, useState, useCallback, useContext, useMemo } from 'react';\nimport { ThemeContext } from '../contexts/ThemeContext';\n\nconst LedGrid = () => {\n    const [pixels, setPixels] = useState([]);\n    const [opacity, setOpacity] = useState(1);\n    const { ledColor, ledPattern } = useContext(ThemeContext);\n    \n    // Reduce grid size for better performance\n    const gridSize = 50; // Reduced from 60\n    const totalPixels = useMemo(() => gridSize * gridSize, [gridSize]);\n\n    // Handle scroll with throttling\n    const handleScroll = useCallback(() => {\n        // Skip calculations if we've scrolled in the last 20ms (throttling)\n        if (handleScroll.timeout) return;\n        \n        handleScroll.timeout = setTimeout(() => {\n            handleScroll.timeout = null;\n        }, 20);\n        \n        const scrollPosition = window.scrollY;\n        const windowHeight = window.innerHeight;\n        const documentHeight = document.documentElement.scrollHeight;\n        const fadeStart = windowHeight * 0.1;\n        const fadeEnd = windowHeight * 0.5;\n\n        if (scrollPosition > fadeStart && scrollPosition < documentHeight - windowHeight) {\n            const fadeRange = fadeEnd - fadeStart;\n            const newOpacity = 1 - Math.min((scrollPosition - fadeStart) / fadeRange, 0.7);\n            setOpacity(newOpacity);\n        } else {\n            setOpacity(1);\n        }\n    }, []);\n\n    // Function to randomly turn pixels on/off\n    const updateRandomPattern = useCallback(() => {\n        setPixels(prev => {\n            const newPixels = [...prev];\n            // Randomly update about 0.5% of pixels\n            for (let i = 0; i < totalPixels * 0.005; i++) {\n                const randomIndex = Math.floor(Math.random() * totalPixels);\n                // Lower chance of turning on (15% on, 85% off) for more sparse effect\n                newPixels[randomIndex] = Math.random() < 0.15;\n            }\n            return newPixels;\n        });\n    }, [totalPixels]);\n\n    // Function for pulse pattern\n    const updatePulsePattern = useCallback(() => {\n        const pulseRate = Date.now() / 1000; // Time-based pulse\n        const pulseIntensity = (Math.sin(pulseRate) + 1) / 2; // Value between 0 and 1\n        \n        setPixels(prev => {\n            const newPixels = [...prev];\n            for (let i = 0; i < totalPixels; i++) {\n                // More pixels light up during pulse peak\n                newPixels[i] = Math.random() < (0.05 + pulseIntensity * 0.2);\n            }\n            return newPixels;\n        });\n    }, [totalPixels]);\n\n    // Function for wave pattern\n    const updateWavePattern = useCallback(() => {\n        const time = Date.now() / 1000;\n        \n        setPixels(prev => {\n            const newPixels = [...prev];\n            for (let row = 0; row < gridSize; row++) {\n                for (let col = 0; col < gridSize; col++) {\n                    const index = row * gridSize + col;\n                    // Create a wave pattern based on position and time\n                    const distFromCenter = Math.sqrt(\n                        Math.pow((row - gridSize/2) / gridSize, 2) + \n                        Math.pow((col - gridSize/2) / gridSize, 2)\n                    );\n                    const wave = Math.sin(distFromCenter * 10 - time * 2);\n                    newPixels[index] = wave > 0.7;\n                }\n            }\n            return newPixels;\n        });\n    }, [gridSize]);\n\n    // Function for sparkle pattern\n    const updateSparklePattern = useCallback(() => {\n    const newPixels = Array(totalPixels).fill(false);\n    for (let i = 0; i < totalPixels * 0.01; i++) {\n        const randomIndex = Math.floor(Math.random() * totalPixels);\n        newPixels[randomIndex] = true;\n    }\n    setPixels(newPixels);\n}, [totalPixels]);\n\n\n    // Select update function based on pattern\n    const getUpdateFunction = useCallback(() => {\n        switch (ledPattern) {\n            case 'pulse':\n                return updatePulsePattern;\n            case 'wave':\n                return updateWavePattern;\n            case 'sparkle':\n                return updateSparklePattern;\n            case 'random':\n            default:\n                return updateRandomPattern;\n        }\n    }, [ledPattern, updatePulsePattern, updateRandomPattern, updateSparklePattern, updateWavePattern]);\n\n    useEffect(() => {\n        // Create initial grid\n        const initialPixels = Array(totalPixels).fill(false);\n        setPixels(initialPixels);\n\n        // Initial update\n        const updateFunction = getUpdateFunction();\n        updateFunction();\n\n        // Update pixels every 100ms instead of 50ms for better performance\n        const interval = setInterval(() => getUpdateFunction()(), 100);\n\n        // Add scroll listener with passive option for better performance\n        window.addEventListener('scroll', handleScroll, { passive: true });\n\n        return () => {\n            clearInterval(interval);\n            window.removeEventListener('scroll', handleScroll);\n        };\n    }, [handleScroll, getUpdateFunction, totalPixels]);\n\n    // Memoize the pixel elements to prevent unnecessary re-renders\n    const pixelElements = useMemo(() => {\n        return pixels.map((isOn, index) => (\n            <div\n                key={index}\n                className={`led-pixel ${isOn ? 'on' : ''}`}\n                style={isOn ? { backgroundColor: ledColor } : {}}\n            />\n        ));\n    }, [pixels, ledColor]);\n\n    return (\n        <div\n            className=\"led-grid\"\n            style={{\n                opacity,\n                height: '100%',\n                position: 'fixed',\n                top: 0,\n                left: 0,\n                right: 0,\n                bottom: 0\n            }}\n        >\n            {pixelElements}\n        </div>\n    );\n};\n\nexport default LedGrid;"],"names":["LedGrid","pixels","setPixels","useState","opacity","setOpacity","ledColor","ledPattern","useContext","ThemeContext","gridSize","totalPixels","useMemo","handleScroll","useCallback","timeout","setTimeout","scrollPosition","window","scrollY","windowHeight","innerHeight","documentHeight","document","documentElement","scrollHeight","fadeStart","fadeRange","newOpacity","Math","min","updateRandomPattern","prev","newPixels","i","floor","random","updatePulsePattern","pulseRate","Date","now","pulseIntensity","sin","updateWavePattern","time","row","col","index","distFromCenter","sqrt","pow","wave","updateSparklePattern","Array","fill","getUpdateFunction","useEffect","initialPixels","updateFunction","interval","setInterval","addEventListener","passive","clearInterval","removeEventListener","pixelElements","map","isOn","_jsx","className","style","backgroundColor","height","position","top","left","right","bottom","children"],"sourceRoot":""}